package com.example.androidapp;

import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.developer.adapter.MenuAdapter;
import com.developer.model.ChatModel;
import com.xmppapp.verification.Result;
import com.xmppapp.verification.VerificationHandler;
import com.xmppapp.verification.VerificationHandler.VerificationInterface;
import com.xmppapp.xmpp.entities.Account;
import com.xmppapp.xmpp.entities.Conversation;
import com.xmppapp.xmpp.services.XmppConnectionService.OnConversationUpdate;
import com.xmppapp.xmpp.ui.StartConversationActivity;
import com.xmppapp.xmpp.ui.XmppActivity;

public class MainActivity extends XmppActivity implements View.OnClickListener, OnItemClickListener, VerificationInterface {
	public static final String VIEW_CONVERSATION = "viewConversation";
	public static final String CONVERSATION = "conversationUuid";
	public static final String TEXT = "text";
	public static final String PRESENCE = "co.getintouch.im.presence";

	public static final int REQUEST_SEND_MESSAGE = 0x75441;
	public static final int REQUEST_DECRYPT_PGP = 0x76783;
	private static final String TAG = "MAIN_ACTIVITY";

	@SuppressWarnings("unused")
	private Fragment childFragment;
	private ListView menu_list_view;
	private ImprovedSlidingPaneLayout mLayout;
	private VerificationHandler verificationHandler;

	private OnConversationUpdate onConvChanged = new OnConversationUpdate() {

		@Override
		public void onConversationUpdate() {
			runOnUiThread(new Runnable() {

				@Override
				public void run() {
					updateConversationList();
				}
			});
		}
	};

	@Override
	protected void onNewIntent(Intent intent) {
		if (xmppConnectionServiceBound) {
			if ((Intent.ACTION_VIEW.equals(intent.getAction()) && (VIEW_CONVERSATION.equals(intent.getType())))) {
				String convToView = (String) intent.getExtras().get(CONVERSATION);
				updateConversationList();
				for (int i = 0; i < conversationList.size(); ++i) {
					if (conversationList.get(i).getUuid().equals(convToView)) {
						setSelectedConversation(conversationList.get(i));
						break;
					}
				}
				paneShouldBeOpen = false;
				String text = intent.getExtras().getString(TEXT, null);
				// swapChatDetailFragment().setText(text);
			}
		} else {
			handledViewIntent = false;
			setIntent(intent);
		}
	}

	public FragmentChatDetails swapChatDetailFragment() {
		FragmentChatDetails selectedFragment = new FragmentChatDetails();

		FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
		transaction.replace(R.id.fragment_home, selectedFragment, "conversation");
		transaction.commitAllowingStateLoss();
		return selectedFragment;
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		verificationHandler = new VerificationHandler(this);
		mLayout = (ImprovedSlidingPaneLayout) findViewById(R.id.sliding_panel_layout);

		// set menu options on the left side menu in home screen
		MenuAdapter adapter = new MenuAdapter(this);
		menu_list_view = (ListView) findViewById(R.id.menu_list);
		menu_list_view.setAdapter(adapter);
		menu_list_view.setOnItemClickListener(this);

		// findViewById(R.id.refresh_button).setOnClickListener(this);
		findViewById(R.id.menu_button).setOnClickListener(this);

		if (verificationHandler.getVerificationStatus() != Result.PASSED) {
			if (verificationHandler.gotoCodeWindow()) {
				getSupportFragmentManager().beginTransaction().replace(R.id.fragment_home, childFragment = new Screen2()).commitAllowingStateLoss();
			} else {
				getSupportFragmentManager().beginTransaction().replace(R.id.fragment_home, childFragment = new Screen1()).commitAllowingStateLoss();
			}
		} else {
			Toast.makeText(this, "Already Verified", Toast.LENGTH_SHORT).show();
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v.getId() == R.id.menu_button) {
			mLayout.openPane();
		}
	}

	private List<Conversation> conversationList = new ArrayList<Conversation>();
	private Conversation selectedConversation = null;
	private ListView listView;

	private boolean paneShouldBeOpen = true;
	private boolean useSubject = true;
	private boolean showLastseen = false;
	private ArrayAdapter<Conversation> listAdapter;

	@Override
	public void onStart() {
		super.onStart();
		SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
		this.useSubject = preferences.getBoolean("use_subject_in_muc", true);
		this.showLastseen = preferences.getBoolean("show_last_seen", false);
		if (this.xmppConnectionServiceBound) {
			this.onBackendConnected();
		}
		if (conversationList.size() >= 1) {
			onConvChanged.onConversationUpdate();
			Log.e(TAG, conversationList.get(0).getName(false));
		}

	}

	@Override
	protected void onStop() {
		if (xmppConnectionServiceBound) {
			xmppConnectionService.removeOnConversationListChangedListener();
		}
		super.onStop();
	}

	private void changeFragment(Fragment newFragment) {
		FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
		ft.replace(R.id.fragment_home, newFragment);
		ft.commit();
		childFragment = newFragment;
	}

	public List<Conversation> getConversationList() {
		return this.conversationList;
	}

	public Conversation getSelectedConversation() {
		return this.selectedConversation;
	}

	@Override
	public void onItemClick(AdapterView<?> a, View v, int position, long arg3) {
		// TODO Auto-generated method stub
		switch (position) {
		case 0:
			changeFragment(new Screen1());
			mLayout.closePane();
			break;
		case 1:
			changeFragment(new FragmentChats());
			mLayout.closePane();
			break;
		case 2:
			startActivity(new Intent(this, StartConversationActivity.class));
			mLayout.closePane();
			break;
		case 3:
			changeFragment(new Screen2());
			mLayout.closePane();
			break;
		case 4:
			changeFragment(new FragmentSettings());
			mLayout.closePane();
			break;
		}
	}

	@Override
	protected void onBackendConnected() {
		this.registerListener();
		if (conversationList.size() == 0) {
			updateConversationList();
		}

		Account account = new Account("TestAccount", "im.getintouch.co", "12345");
		account.setOption(Account.OPTION_USETLS, true);
		account.setOption(Account.OPTION_USECOMPRESSION, true);
		this.xmppConnectionService.createAccount(account);

		// if ((getIntent().getAction() != null) &&
		// (getIntent().getAction().equals(Intent.ACTION_VIEW) &&
		// (!handledViewIntent))) {
		// if
		// (getIntent().getType().equals(ConversationActivity.VIEW_CONVERSATION))
		// {
		// handledViewIntent = true;
		//
		// String convToView = (String)
		// getIntent().getExtras().get(CONVERSATION);
		//
		// for (int i = 0; i < conversationList.size(); ++i) {
		// if (conversationList.get(i).getUuid().equals(convToView)) {
		// setSelectedConversation(conversationList.get(i));
		// }
		// }
		// paneShouldBeOpen = false;
		// String text = getIntent().getExtras().getString(TEXT, null);
		// // swapConversationFragment().setText(text);
		// }
		// } else {
		// if (xmppConnectionService.getAccounts().size() == 0) {
		// startActivity(new Intent(this, ManageAccountActivity.class));
		// finish();
		// } else if (conversationList.size() <= 0) {
		// // add no history
		// startActivity(new Intent(this, StartConversationActivity.class));
		// finish();
		// } else {
		// // find currently loaded fragment
		// ConversationFragment selectedFragment = (ConversationFragment)
		// getFragmentManager().findFragmentByTag("conversation");
		// if (selectedFragment != null) {
		// selectedFragment.onBackendConnected();
		// } else {
		// setSelectedConversation(conversationList.get(0));
		// // swapConversationFragment();
		// }
		// ExceptionHelper.checkForCrash(this, this.xmppConnectionService);
		// }
		// }
	}

	public void setSelectedConversation(Conversation conversation) {
		this.selectedConversation = conversation;
	}

	public void registerListener() {
		if (xmppConnectionServiceBound) {
			xmppConnectionService.setOnConversationListChangedListener(this.onConvChanged);
		}
	}

	public void updateConversationList() {
		xmppConnectionService.populateWithOrderedConversations(conversationList);

		FragmentChats fragmentChats = (FragmentChats) getSupportFragmentManager().findFragmentByTag("fragment_chat");
		if (fragmentChats != null) {
			ArrayList<ChatModel> chatModels = new ArrayList<ChatModel>();
			for (Conversation conversation : conversationList) {
				ChatModel chatModel = new ChatModel(conversation.getName(false), conversation.getLatestMessage().getBody(), "Time",
						R.drawable.ic_launcher, R.drawable.ic_launcher);
				chatModels.add(chatModel);
			}
			// fragmentChats.updateConversationList(chatModels);
		}
	}

	@Override
	public void onVerificationProcessStart() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onVerificationProcessEnd() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMsgCodeReceived(String mCode) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMsgSendingStart() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMsgSendinEnd() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onRandomCodeGenerate(String randomCode) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPhoneNumberFound(String phoneNumber) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onVerificationResult(Result mResult) {
		// TODO Auto-generated method stub

	}

	public VerificationHandler getVerificationHandler() {
		return this.verificationHandler;
	}
}
